import { ConsumeOptions, Consumer, ConsumerAPI, ConsumerCallbackFn, ConsumerConfig, ConsumerInfo, ConsumerMessages, DeliverPolicy, FetchOptions, JsMsg, NextOptions, ReplayPolicy } from "./types";
import { ConsumerAPIImpl } from "./jsmconsumer_api";
import { OrderedConsumerMessages } from "./consumermessages";
declare enum PullConsumerType {
    Unset = -1,
    Consume = 0,
    Fetch = 1
}
export declare class PullConsumerImpl implements Consumer {
    api: ConsumerAPIImpl;
    _info: ConsumerInfo;
    stream: string;
    name: string;
    constructor(api: ConsumerAPI, info: ConsumerInfo);
    consume(opts?: ConsumeOptions): Promise<ConsumerMessages>;
    fetch(opts?: FetchOptions): Promise<ConsumerMessages>;
    next(opts?: NextOptions): Promise<JsMsg | null>;
    delete(): Promise<boolean>;
    info(cached?: boolean): Promise<ConsumerInfo>;
}
export type OrderedConsumerOptions = {
    filterSubjects: string[] | string;
    deliver_policy: DeliverPolicy;
    opt_start_seq: number;
    opt_start_time: string;
    replay_policy: ReplayPolicy;
    inactive_threshold: number;
};
export declare class OrderedPullConsumerImpl implements Consumer {
    api: ConsumerAPIImpl;
    consumerOpts: Partial<OrderedConsumerOptions>;
    consumer: PullConsumerImpl;
    opts: ConsumeOptions | FetchOptions;
    cursor: {
        stream_seq: number;
        deliver_seq: number;
    };
    stream: string;
    namePrefix: string;
    serial: number;
    currentConsumer: ConsumerInfo | null;
    userCallback: ConsumerCallbackFn | null;
    iter: OrderedConsumerMessages | null;
    type: PullConsumerType;
    startSeq: number;
    constructor(api: ConsumerAPI, stream: string, opts?: Partial<OrderedConsumerOptions>);
    getConsumerOpts(seq: number): ConsumerConfig;
    resetConsumer(seq?: number): Promise<ConsumerInfo>;
    internalHandler(serial: number): (m: JsMsg) => void;
    reset(opts?: ConsumeOptions | FetchOptions, fromFetch?: boolean): Promise<ConsumerMessages>;
    consume(opts?: ConsumeOptions): Promise<ConsumerMessages>;
    fetch(opts?: FetchOptions): Promise<ConsumerMessages>;
    next(opts?: NextOptions): Promise<JsMsg | null>;
    delete(): Promise<boolean>;
    info(cached?: boolean): Promise<ConsumerInfo>;
}
export {};
