import { ArgumentsHost } from '@nestjs/common';
import { DiscoveryService, Reflector } from '@nestjs/core';
import { OgmaInterceptorServiceOptions } from '../../interfaces';
import { OgmaService } from '../../ogma.service';
import { DelegatorContextReturn } from '../interfaces/log.interface';
export declare class DelegatorService {
    private readonly discoveryService;
    private readonly reflector;
    private readonly logger;
    private readonly parserMap;
    constructor(discoveryService: DiscoveryService, reflector: Reflector, logger: OgmaService);
    onModuleInit(): Promise<void>;
    setRequestId(context: ArgumentsHost, requestId: string): void;
    getRequestId(context: ArgumentsHost): any;
    getContextSuccessString(data: any, context: ArgumentsHost, startTime: number, options: OgmaInterceptorServiceOptions): DelegatorContextReturn;
    private getParser;
    getContextErrorString(error: any, context: ArgumentsHost, startTime: number, options: OgmaInterceptorServiceOptions): DelegatorContextReturn;
    private getContextString;
    private getStringOrObject;
    getStartTime(host: ArgumentsHost): number;
}
