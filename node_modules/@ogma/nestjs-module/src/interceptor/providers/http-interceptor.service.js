"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpInterceptorService = void 0;
const common_1 = require("@nestjs/common");
const constants_1 = require("@nestjs/common/constants");
const abstract_interceptor_service_1 = require("./abstract-interceptor.service");
let HttpInterceptorService = exports.HttpInterceptorService = class HttpInterceptorService extends abstract_interceptor_service_1.AbstractInterceptorService {
    getStatus(context, inColor, error) {
        let status;
        const res = this.getResponse(context);
        status = res.statusCode;
        if (!error) {
            const reflectStatus = this.reflector.get(constants_1.HTTP_CODE_METADATA, context.getHandler());
            status = reflectStatus || status;
        }
        else {
            status = this.determineStatusCodeFromError(error);
        }
        return inColor ? this.wrapInColor(status) : status.toString();
    }
    determineStatusCodeFromError(error) {
        let status;
        try {
            status = error.getStatus();
        }
        catch (err) {
            status = 500;
        }
        return status;
    }
    /**
     * A helper method to get the response object
     * @param context execution context from Nest
     * @returns the adapter's response object
     */
    getResponse(context) {
        return context.switchToHttp().getResponse();
    }
    /**
     * A helper method to get the request object
     * @param context execution context from Nest
     * @returns the adapter's request object
     */
    getRequest(context) {
        return context.switchToHttp().getRequest();
    }
    setRequestId(context, requestId) {
        const req = this.getRequest(context);
        req.requestId = requestId;
    }
    getRequestId(context) {
        return this.getRequest(context).requestId;
    }
};
exports.HttpInterceptorService = HttpInterceptorService = __decorate([
    (0, common_1.Injectable)()
], HttpInterceptorService);
