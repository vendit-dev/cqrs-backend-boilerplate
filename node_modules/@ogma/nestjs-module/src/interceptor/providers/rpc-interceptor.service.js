"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcInterceptorService = void 0;
const common_1 = require("@nestjs/common");
const abstract_interceptor_service_1 = require("./abstract-interceptor.service");
let RpcInterceptorService = exports.RpcInterceptorService = class RpcInterceptorService extends abstract_interceptor_service_1.AbstractInterceptorService {
    getCallPoint(context) {
        return this.reflector.get('microservices:pattern', context.getHandler())[0];
    }
    /**
     * A helper method to get the appropriate data object for the adapter
     * @param context execution context from Nest
     * @returns The data object for the RPC adapter
     */
    getData(context) {
        return context.switchToRpc().getData();
    }
    /**
     * A helper method to get the RPC client from the execution context
     * @param context execution context from Nest
     * @returns The client object for the RPC adapter
     */
    getClient(context) {
        return context.switchToRpc().getContext();
    }
    setRequestId(context, requestId) {
        const client = this.getClient(context);
        client.requestId = requestId;
    }
    getRequestId(context) {
        return this.getClient(context).requestId;
    }
};
exports.RpcInterceptorService = RpcInterceptorService = __decorate([
    (0, common_1.Injectable)()
], RpcInterceptorService);
