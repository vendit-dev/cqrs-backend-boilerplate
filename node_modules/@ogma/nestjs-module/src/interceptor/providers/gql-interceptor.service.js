"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GqlInterceptorService = void 0;
const common_1 = require("@nestjs/common");
const abstract_interceptor_service_1 = require("./abstract-interceptor.service");
let GqlInterceptorService = exports.GqlInterceptorService = class GqlInterceptorService extends abstract_interceptor_service_1.AbstractInterceptorService {
    setRequestId(context, requestId) {
        const ctx = this.getContext(context).context;
        if (ctx[this.reqName]) {
            ctx[this.reqName].requestId = requestId;
        }
        else {
            ctx.requestId = requestId;
        }
    }
    getRequestId(context) {
        var _a, _b;
        const ctx = this.getContext(context).context;
        return (_b = (_a = ctx[this.reqName]) === null || _a === void 0 ? void 0 : _a.requestId) !== null && _b !== void 0 ? _b : ctx.requestId;
    }
};
exports.GqlInterceptorService = GqlInterceptorService = __decorate([
    (0, common_1.Injectable)()
], GqlInterceptorService);
