"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgmaFilterService = void 0;
const common_1 = require("@nestjs/common");
const providers_1 = require("./interceptor/providers");
const ogma_service_1 = require("./ogma.service");
let OgmaFilterService = exports.OgmaFilterService = class OgmaFilterService {
    constructor(service, delegator) {
        this.service = service;
        this.delegator = delegator;
        const ogmaOptions = this.service.ogma.options;
        this.json = ogmaOptions.json;
        this.color = ogmaOptions.color;
    }
    log(exception, host) {
        if (this.hasAlreadyBeenLogged(host)) {
            return;
        }
        const valueToLog = this.delegator.getContextErrorString(exception, host, this.delegator.getStartTime(host), {
            json: this.json,
            color: this.color,
        });
        this.doLog(valueToLog.log);
    }
    doLog(valueToLog) {
        this.service.log(valueToLog, { context: 'ExceptionFilter' });
    }
    hasAlreadyBeenLogged(host) {
        return !!this.delegator.getRequestId(host);
    }
};
exports.OgmaFilterService = OgmaFilterService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [ogma_service_1.OgmaService, providers_1.DelegatorService])
], OgmaFilterService);
