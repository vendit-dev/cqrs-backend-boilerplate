import { OgmaOptions } from '../interfaces';
import { OgmaPrintOptions } from '../interfaces/ogma-print-options';
/**
 * The main logger instance
 */
export declare class Ogma {
    private options;
    private pid;
    private jsonPid;
    private hostname;
    private styler;
    private each;
    private application;
    private cachedContextFormatted;
    private sillyFormattedLevel;
    private verboseFormattedLevel;
    private debugFormattedLevel;
    private infoFormattedLevel;
    private warnFormattedLevel;
    private errorFormattedLevel;
    private fatalFormattedLevel;
    private hostnameFormatted;
    private cachedMasks?;
    private skipableTypeofValues;
    private wrappedValues;
    /**
     * An alias for `ogma.verbose`. `FINE` is what is printed as the log level
     */
    fine: (message: any, meta?: OgmaPrintOptions) => void;
    /**
     * An alias for `ogma.info`. `INFO` is what is printed as the log level
     */
    log: (message: any, meta?: OgmaPrintOptions) => void;
    constructor(options?: Partial<OgmaOptions>);
    private setStreamColorDepth;
    private printMessage;
    private circularReplacer;
    private toColor;
    private wrapInBrackets;
    private formatJSON;
    private asString;
    private stringifyObject;
    private formatStream;
    private toStreamColor;
    private getTimestamp;
    /**
     * Make a log at the least important level possible. Could be fun for Easter Eggs if you like adding those in.
     * Prints the level in a magenta color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    silly(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Make a log at the `fine` or `verbose` level. Great for adding in some nitty gritty details.
     * Prints the level in a green color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    verbose(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Make a log at the `debug` level. Good for quick messages while debugging that shouldn't make it to production.
     * Prints the level in a blue color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    debug(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Makes a log at the `info` level. This is where most of the logging is done generally.
     * Prints the level in a cyan color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    info(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Makes a log at the `info` level. This is where most of the logging is done generally.
     * Prints the level in a cyan color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    warn(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Makes a log at the `info` level. This is where most of the logging is done generally.
     * Prints the level in a cyan color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    error(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Makes a log at the `fatal` level. This is for mission critical problems. Usually if a `fatal` log is made, someone should be getting a call at 3AM.
     * Prints the level in a red background with white underline and lettering
     * Prints the level in a cyan color
     * @param message what to log
     * @param meta any additional information you want to add
     */
    fatal(message: any, meta?: OgmaPrintOptions): void;
    /**
     * Splits up the error between it's name, message, and stack.
     * The name is logged at the `error` level,
     * the message at the `warn` level,
     * and the stack trace at the `verbose` level.
     * @param error The error to print
     * @param meta any additional information you want to add
     */
    printError(error: Error, meta?: OgmaPrintOptions): void;
}
