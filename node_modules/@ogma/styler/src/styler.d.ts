import { OgmaStream } from '@ogma/common';
export declare class Styler {
    private stylesToApply;
    private colorDepth;
    private useStyle;
    get black(): this;
    get blackBg(): this;
    get bBlack(): this;
    get bBlackBg(): this;
    get red(): this;
    get redBg(): this;
    get bRed(): this;
    get bRedBg(): this;
    get green(): this;
    get greenBg(): this;
    get bGreen(): this;
    get bGreenBg(): this;
    get yellow(): this;
    get yellowBg(): this;
    get bYellow(): this;
    get bYellowBg(): this;
    get blue(): this;
    get blueBg(): this;
    get bBlue(): this;
    get bBlueBg(): this;
    get magenta(): this;
    get magentaBg(): this;
    get bMagenta(): this;
    get bMagentaBg(): this;
    get cyan(): this;
    get cyanBg(): this;
    get bCyan(): this;
    get bCyanBg(): this;
    get white(): this;
    get whiteBg(): this;
    get bWhite(): this;
    get bWhiteBg(): this;
    get bold(): this;
    get faint(): this;
    get italic(): this;
    get underline(): this;
    get blink(): this;
    get fastBlink(): this;
    get invert(): this;
    get strikeThrough(): this;
    get doubleUnderline(): this;
    get reveal(): this;
    get framed(): this;
    get encircled(): this;
    get overlined(): this;
    get superscript(): this;
    get subscript(): this;
    constructor(stream?: Pick<OgmaStream, 'getColorDepth'>);
    /**
     * The final method in a style chain that applies all of the styles to the value.
     * If there are no styles to apply, the value is returned untouched.
     * @param val the value to add styling to
     * @returns A string that has the proper SGR values
     */
    apply(val: string | number | boolean): string;
    /**
     * A helper method for easily setting the background color
     * @param colorVal The numeric value or string value for the color to apply
     */
    bgColor(colorVal: string | number): this;
    /**
     * A helper method for setting the color for a string. This color is in the form of `[38;5;<number>m`. This format comes from the 8-bit color rendition. See the linked table for more options
     *
     * If the `colorDepth` for the styler is `1`, then no sgr will be added to the styles to apply.
     * @param colorVal The numeric value or string value for the color to apply
     * @param position background or foreground. Defaults to foreground
     * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
     */
    color(colorVal: string | number, position?: 'foreground' | 'background'): this;
    /**
     * A method for creating a new instance of the Styler class. This is useful for when you want to have one stream for your logger and a different one set for the styler (forced colors). Or it is useful in general for test cases.
     * @param stream a new stream instance
     * @returns a new Styler instance
     */
    child(stream?: Pick<OgmaStream, 'getColorDepth'>): Styler;
    /**
     * @link https://en.wikipedia.org/wiki/ANSI_escape_code#SGR
     */
    private sgr;
}
