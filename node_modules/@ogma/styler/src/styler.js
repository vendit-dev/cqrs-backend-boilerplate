"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Styler = void 0;
const sgrColorMap = new Map([
    ['3', true],
    ['4', true],
    ['9', true],
]);
const colorMap = {
    [30 /* Style.BLACK */]: 30 /* Style.BLACK */.toString(),
    [40 /* Style.BLACKBG */]: 40 /* Style.BLACKBG */.toString(),
    [90 /* Style.BRIGHTBLACK */]: 90 /* Style.BRIGHTBLACK */.toString(),
    [100 /* Style.BRIGHTBLACKBG */]: 100 /* Style.BRIGHTBLACKBG */.toString(),
    [31 /* Style.RED */]: 31 /* Style.RED */.toString(),
    [41 /* Style.REDBG */]: 41 /* Style.REDBG */.toString(),
    [91 /* Style.BRIGHTRED */]: 91 /* Style.BRIGHTRED */.toString(),
    [101 /* Style.BRIGHTREDBG */]: 101 /* Style.BRIGHTREDBG */.toString(),
    [32 /* Style.GREEN */]: 32 /* Style.GREEN */.toString(),
    [42 /* Style.GREENBG */]: 42 /* Style.GREENBG */.toString(),
    [92 /* Style.BRIGHTGREEN */]: 92 /* Style.BRIGHTGREEN */.toString(),
    [102 /* Style.BRIGHTGREENBG */]: 102 /* Style.BRIGHTGREENBG */.toString(),
    [33 /* Style.YELLOW */]: 33 /* Style.YELLOW */.toString(),
    [43 /* Style.YELLOWBG */]: 43 /* Style.YELLOWBG */.toString(),
    [93 /* Style.BRIGHTYELLOW */]: 93 /* Style.BRIGHTYELLOW */.toString(),
    [103 /* Style.BRIGHTYELLOWBG */]: 103 /* Style.BRIGHTYELLOWBG */.toString(),
    [34 /* Style.BLUE */]: 34 /* Style.BLUE */.toString(),
    [44 /* Style.BLUEBG */]: 44 /* Style.BLUEBG */.toString(),
    [94 /* Style.BRIGHTBLUE */]: 94 /* Style.BRIGHTBLUE */.toString(),
    [35 /* Style.MAGENTA */]: 35 /* Style.MAGENTA */.toString(),
    [45 /* Style.MAGENTABG */]: 45 /* Style.MAGENTABG */.toString(),
    [95 /* Style.BRIGHTMAGENTA */]: 95 /* Style.BRIGHTMAGENTA */.toString(),
    [105 /* Style.BRIGHTMAGENTABG */]: 105 /* Style.BRIGHTMAGENTABG */.toString(),
    [36 /* Style.CYAN */]: 36 /* Style.CYAN */.toString(),
    [46 /* Style.CYANBG */]: 46 /* Style.CYANBG */.toString(),
    [96 /* Style.BRIGHTCYAN */]: 96 /* Style.BRIGHTCYAN */.toString(),
    [106 /* Style.BIRGHTCYANBG */]: 106 /* Style.BIRGHTCYANBG */.toString(),
    [37 /* Style.WHITE */]: 37 /* Style.WHITE */.toString(),
    [47 /* Style.WHITEBG */]: 47 /* Style.WHITEBG */.toString(),
    [97 /* Style.BRIGHTWHIET */]: 97 /* Style.BRIGHTWHIET */.toString(),
    [107 /* Style.BRIGHTWHITEBG */]: 107 /* Style.BRIGHTWHITEBG */.toString(),
    [1 /* Style.BOLD */]: 1 /* Style.BOLD */.toString(),
    [2 /* Style.FAINT */]: 2 /* Style.FAINT */.toString(),
    [3 /* Style.ITALIC */]: 3 /* Style.ITALIC */.toString(),
    [4 /* Style.UNDERLINE */]: 4 /* Style.UNDERLINE */.toString(),
    [5 /* Style.BLINK */]: 5 /* Style.BLINK */.toString(),
    [6 /* Style.FASTBLINK */]: 6 /* Style.FASTBLINK */.toString(),
    [7 /* Style.INVERT */]: 7 /* Style.INVERT */.toString(),
    [9 /* Style.STRIKE */]: 9 /* Style.STRIKE */.toString(),
    [21 /* Style.DOUBLEUNDERLINE */]: 21 /* Style.DOUBLEUNDERLINE */.toString(),
    [22 /* Style.REVEAL */]: 22 /* Style.REVEAL */.toString(),
    [51 /* Style.FRAMED */]: 51 /* Style.FRAMED */.toString(),
    [52 /* Style.ENCIRCLED */]: 52 /* Style.ENCIRCLED */.toString(),
    [53 /* Style.OVERLINED */]: 53 /* Style.OVERLINED */.toString(),
    [73 /* Style.SUPER */]: 73 /* Style.SUPER */.toString(),
    [74 /* Style.SUB */]: 74 /* Style.SUB */.toString(),
    [0 /* Style.NONE */]: 0 /* Style.NONE */.toString(),
    [8 /* Style.CONCEAL */]: 8 /* Style.CONCEAL */.toString(),
    [38 /* Style.COLOR */]: 38 /* Style.COLOR */.toString(),
    [48 /* Style.BGCOLOR */]: 48 /* Style.BGCOLOR */.toString(),
    [104 /* Style.BRIGHTBLUEBG */]: 104 /* Style.BRIGHTBLUEBG */.toString(),
};
class Styler {
    get black() {
        return this.sgr(colorMap[30 /* Style.BLACK */]);
    }
    get blackBg() {
        return this.sgr(colorMap[40 /* Style.BLACKBG */]);
    }
    get bBlack() {
        return this.sgr(colorMap[90 /* Style.BRIGHTBLACK */]);
    }
    get bBlackBg() {
        return this.sgr(colorMap[100 /* Style.BRIGHTBLACKBG */]);
    }
    get red() {
        return this.sgr(colorMap[31 /* Style.RED */]);
    }
    get redBg() {
        return this.sgr(colorMap[41 /* Style.REDBG */]);
    }
    get bRed() {
        return this.sgr(colorMap[91 /* Style.BRIGHTRED */]);
    }
    get bRedBg() {
        return this.sgr(colorMap[101 /* Style.BRIGHTREDBG */]);
    }
    get green() {
        return this.sgr(colorMap[32 /* Style.GREEN */]);
    }
    get greenBg() {
        return this.sgr(colorMap[42 /* Style.GREENBG */]);
    }
    get bGreen() {
        return this.sgr(colorMap[92 /* Style.BRIGHTGREEN */]);
    }
    get bGreenBg() {
        return this.sgr(colorMap[102 /* Style.BRIGHTGREENBG */]);
    }
    get yellow() {
        return this.sgr(colorMap[33 /* Style.YELLOW */]);
    }
    get yellowBg() {
        return this.sgr(colorMap[43 /* Style.YELLOWBG */]);
    }
    get bYellow() {
        return this.sgr(colorMap[93 /* Style.BRIGHTYELLOW */]);
    }
    get bYellowBg() {
        return this.sgr(colorMap[103 /* Style.BRIGHTYELLOWBG */]);
    }
    get blue() {
        return this.sgr(colorMap[34 /* Style.BLUE */]);
    }
    get blueBg() {
        return this.sgr(colorMap[44 /* Style.BLUEBG */]);
    }
    get bBlue() {
        return this.sgr(colorMap[94 /* Style.BRIGHTBLUE */]);
    }
    get bBlueBg() {
        return this.sgr(colorMap[104 /* Style.BRIGHTBLUEBG */]);
    }
    get magenta() {
        return this.sgr(colorMap[35 /* Style.MAGENTA */]);
    }
    get magentaBg() {
        return this.sgr(colorMap[45 /* Style.MAGENTABG */]);
    }
    get bMagenta() {
        return this.sgr(colorMap[95 /* Style.BRIGHTMAGENTA */]);
    }
    get bMagentaBg() {
        return this.sgr(colorMap[105 /* Style.BRIGHTMAGENTABG */]);
    }
    get cyan() {
        return this.sgr(colorMap[36 /* Style.CYAN */]);
    }
    get cyanBg() {
        return this.sgr(colorMap[46 /* Style.CYANBG */]);
    }
    get bCyan() {
        return this.sgr(colorMap[96 /* Style.BRIGHTCYAN */]);
    }
    get bCyanBg() {
        return this.sgr(colorMap[106 /* Style.BIRGHTCYANBG */]);
    }
    get white() {
        return this.sgr(colorMap[37 /* Style.WHITE */]);
    }
    get whiteBg() {
        return this.sgr(colorMap[47 /* Style.WHITEBG */]);
    }
    get bWhite() {
        return this.sgr(colorMap[97 /* Style.BRIGHTWHIET */]);
    }
    get bWhiteBg() {
        return this.sgr(colorMap[107 /* Style.BRIGHTWHITEBG */]);
    }
    get bold() {
        return this.sgr(colorMap[1 /* Style.BOLD */]);
    }
    get faint() {
        return this.sgr(colorMap[2 /* Style.FAINT */]);
    }
    get italic() {
        return this.sgr(colorMap[3 /* Style.ITALIC */]);
    }
    get underline() {
        return this.sgr(colorMap[4 /* Style.UNDERLINE */]);
    }
    get blink() {
        return this.sgr(colorMap[5 /* Style.BLINK */]);
    }
    get fastBlink() {
        return this.sgr(colorMap[6 /* Style.FASTBLINK */]);
    }
    get invert() {
        return this.sgr(colorMap[7 /* Style.INVERT */]);
    }
    get strikeThrough() {
        return this.sgr(colorMap[9 /* Style.STRIKE */]);
    }
    get doubleUnderline() {
        return this.sgr(colorMap[21 /* Style.DOUBLEUNDERLINE */]);
    }
    get reveal() {
        return this.sgr(colorMap[22 /* Style.REVEAL */]);
    }
    get framed() {
        return this.sgr(colorMap[51 /* Style.FRAMED */]);
    }
    get encircled() {
        return this.sgr(colorMap[52 /* Style.ENCIRCLED */]);
    }
    get overlined() {
        return this.sgr(colorMap[53 /* Style.OVERLINED */]);
    }
    get superscript() {
        return this.sgr(colorMap[73 /* Style.SUPER */]);
    }
    get subscript() {
        return this.sgr(colorMap[74 /* Style.SUB */]);
    }
    constructor(stream = process.stdout) {
        var _a;
        this.stylesToApply = '';
        this.colorDepth = 16;
        this.useStyle = true;
        if (stream.getColorDepth) {
            this.colorDepth = stream.getColorDepth();
        }
        if (process.env.FORCE_COLOR) {
            this.colorDepth = (_a = [1, 4, 8, 24][Number.parseInt(process.env.FORCE_COLOR)]) !== null && _a !== void 0 ? _a : this.colorDepth;
        }
        if (process.env.NO_COLOR || process.env.NODE_DISABLE_COLOR) {
            this.colorDepth = 1;
        }
        if (process.env.NO_STYLE) {
            this.useStyle = false;
        }
    }
    /**
     * The final method in a style chain that applies all of the styles to the value.
     * If there are no styles to apply, the value is returned untouched.
     * @param val the value to add styling to
     * @returns A string that has the proper SGR values
     */
    apply(val) {
        if (this.stylesToApply === '')
            return val.toString();
        const returnValue = `${this.stylesToApply}${val}\x1B[0m`;
        this.stylesToApply = '';
        return returnValue;
    }
    /**
     * A helper method for easily setting the background color
     * @param colorVal The numeric value or string value for the color to apply
     */
    bgColor(colorVal) {
        return this.color(colorVal, 'background');
    }
    /**
     * A helper method for setting the color for a string. This color is in the form of `[38;5;<number>m`. This format comes from the 8-bit color rendition. See the linked table for more options
     *
     * If the `colorDepth` for the styler is `1`, then no sgr will be added to the styles to apply.
     * @param colorVal The numeric value or string value for the color to apply
     * @param position background or foreground. Defaults to foreground
     * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
     */
    color(colorVal, position = 'foreground') {
        let applyStyle = '';
        if (position === 'foreground') {
            applyStyle = `${38 /* Style.COLOR */};5;${colorVal}`;
        }
        else {
            applyStyle = `${48 /* Style.BGCOLOR */};5;${colorVal}`;
        }
        if (this.colorDepth === 1) {
            return this;
        }
        return this.sgr(applyStyle);
    }
    /**
     * A method for creating a new instance of the Styler class. This is useful for when you want to have one stream for your logger and a different one set for the styler (forced colors). Or it is useful in general for test cases.
     * @param stream a new stream instance
     * @returns a new Styler instance
     */
    child(stream) {
        return new Styler(stream);
    }
    /**
     * @link https://en.wikipedia.org/wiki/ANSI_escape_code#SGR
     */
    sgr(val) {
        if ((this.colorDepth === 1 && val.length >= 2 && sgrColorMap.has(val[0])) ||
            (val[0] === '1' && val[1] === '0')) {
            return this;
        }
        if (this.useStyle) {
            this.stylesToApply += `\x1B[${val}m`;
        }
        return this;
    }
}
exports.Styler = Styler;
