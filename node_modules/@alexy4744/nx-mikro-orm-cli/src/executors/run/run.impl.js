"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameExistingPackageJson = exports.fileExists = void 0;
const tslib_1 = require("tslib");
const child_process = require("child_process");
const fs = require("fs");
const path = require("path");
const util = require("util");
const exec = util.promisify(child_process.exec);
const fileExists = (path) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return !!(yield fs.promises.stat(path).catch(() => false)); });
exports.fileExists = fileExists;
const renameExistingPackageJson = (packageJsonPath) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (!(yield exports.fileExists(packageJsonPath))) {
        return null;
    }
    const renamedPath = `${packageJsonPath}.${Date.now()}`;
    yield fs.promises.rename(packageJsonPath, renamedPath);
    return renamedPath;
});
exports.renameExistingPackageJson = renameExistingPackageJson;
exports.default = (options, context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const project = context.workspace.projects[context.projectName];
    const binPath = path.join(context.root, "node_modules", ".bin", "mikro-orm");
    const projectPath = path.join(context.root, project.root);
    const projectPackageJsonPath = path.join(projectPath, "package.json");
    // Rename the package.json if one already exists in the project root
    const renamedPackageJsonPath = yield exports.renameExistingPackageJson(projectPackageJsonPath);
    const shim = JSON.stringify({
        "mikro-orm": options.config
    });
    yield fs.promises.writeFile(projectPackageJsonPath, shim);
    try {
        const { stderr, stdout } = yield exec(`${binPath} ${options.args}`, {
            cwd: projectPath,
            env: Object.assign({ 
                // MikroORM v5 requires a global installation of the CLI and drivers; but since we always execute the CLI in the workspace root,
                // this is an irrelevant requirement, see https://github.com/mikro-orm/mikro-orm/commit/8952149a78be5ba527ae1614cb1eb36d6d8d1dd9
                MIKRO_ORM_ALLOW_GLOBAL_CLI: "1" }, process.env)
        });
        process.stderr.write(stderr);
        process.stdout.write(stdout);
    }
    finally {
        // Delete the generated package json shim
        yield fs.promises.rm(projectPackageJsonPath);
        // If an existing package.json was renamed, then restore its original name
        if (renamedPackageJsonPath) {
            yield fs.promises.rename(renamedPackageJsonPath, projectPackageJsonPath);
        }
    }
    return {
        success: true
    };
});
//# sourceMappingURL=run.impl.js.map