"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MariaDbDriver = void 0;
const knex_1 = require("@mikro-orm/knex");
const MariaDbConnection_1 = require("./MariaDbConnection");
const MariaDbPlatform_1 = require("./MariaDbPlatform");
class MariaDbDriver extends knex_1.AbstractSqlDriver {
    constructor(config) {
        super(config, new MariaDbPlatform_1.MariaDbPlatform(), MariaDbConnection_1.MariaDbConnection, ['knex', 'mariadb']);
    }
    async init() {
        await super.init();
        // the increment step may differ when running a cluster, see https://github.com/mikro-orm/mikro-orm/issues/3828
        const res = await this.connection.execute(`show variables like 'auto_increment_increment'`);
        this.autoIncrementIncrement = res[0]?.auto_increment_increment ? +res[0]?.auto_increment_increment : 1;
    }
    async nativeInsertMany(entityName, data, options = {}) {
        options.processCollections ?? (options.processCollections = true);
        const res = await super.nativeInsertMany(entityName, data, options);
        const pks = this.getPrimaryKeyFields(entityName);
        data.forEach((item, idx) => res.rows[idx] = { [pks[0]]: item[pks[0]] ?? res.insertId + (idx * this.autoIncrementIncrement) });
        res.row = res.rows[0];
        return res;
    }
}
exports.MariaDbDriver = MariaDbDriver;
