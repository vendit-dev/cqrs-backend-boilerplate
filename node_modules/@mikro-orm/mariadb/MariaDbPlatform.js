"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MariaDbPlatform = void 0;
const knex_1 = require("@mikro-orm/knex");
const MariaDbSchemaHelper_1 = require("./MariaDbSchemaHelper");
const MariaDbExceptionConverter_1 = require("./MariaDbExceptionConverter");
const core_1 = require("@mikro-orm/core");
class MariaDbPlatform extends knex_1.AbstractSqlPlatform {
    constructor() {
        super(...arguments);
        this.schemaHelper = new MariaDbSchemaHelper_1.MariaDbSchemaHelper(this);
        this.exceptionConverter = new MariaDbExceptionConverter_1.MariaDbExceptionConverter();
    }
    getDefaultCharset() {
        return 'utf8mb4';
    }
    getBooleanTypeDeclarationSQL() {
        return 'tinyint(1)';
    }
    getDefaultMappedType(type) {
        if (type === 'tinyint(1)') {
            return super.getDefaultMappedType('boolean');
        }
        const normalizedType = this.extractSimpleType(type);
        const map = {
            int: 'integer',
            timestamp: 'datetime',
        };
        return super.getDefaultMappedType(map[normalizedType] ?? type);
    }
    supportsUnsigned() {
        return true;
    }
    /**
     * Returns the default name of index for the given columns
     * cannot go past 64 character length for identifiers in MySQL
     */
    getIndexName(tableName, columns, type) {
        if (type === 'primary') {
            return this.getDefaultPrimaryName(tableName, columns);
        }
        const indexName = super.getIndexName(tableName, columns, type);
        /* istanbul ignore next */
        if (indexName.length > 64) {
            return `${indexName.substring(0, 56 - type.length)}_${core_1.Utils.hash(indexName, 5)}_${type}`;
        }
        return indexName;
    }
    getDefaultPrimaryName(tableName, columns) {
        return 'PRIMARY'; // https://dev.mysql.com/doc/refman/8.0/en/create-table.html#create-table-indexes-keys
    }
    supportsCreatingFullTextIndex() {
        return true;
    }
    getFullTextWhereClause() {
        return `match(:column:) against (:query in boolean mode)`;
    }
    getFullTextIndexExpression(indexName, schemaName, tableName, columns) {
        /* istanbul ignore next */
        const quotedTableName = this.quoteIdentifier(schemaName ? `${schemaName}.${tableName}` : tableName);
        const quotedColumnNames = columns.map(c => this.quoteIdentifier(c.name));
        const quotedIndexName = this.quoteIdentifier(indexName);
        return `alter table ${quotedTableName} add fulltext index ${quotedIndexName}(${quotedColumnNames.join(',')})`;
    }
}
exports.MariaDbPlatform = MariaDbPlatform;
